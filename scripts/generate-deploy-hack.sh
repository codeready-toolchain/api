#!/usr/bin/env bash

# Exit on error
set -e

user_help () {
    echo "Generate deploy_csv.yaml file containing CatalogSource and ConfigMap. The file can be used for an easy deployment of the operator manifest for testing purposes."
    echo "The CatalogSource adds the operator into the OperatorHub and as a source it uses the ConfigMap. The ConfigMap contains all detected CSVs, CRDs and package file."
    echo ""
    echo "options:"
    echo "-crds, --crds-dir        Path to the directory where CRDs are listed"
    echo "-hd,   --hack-dir        Path to the hack directory where the deploy_csv.yaml file should be generated"
    echo "-csvs, --csvs-dir        Path to the directory where CSVs should be recursively found"
    echo "-pf,   --package-file    Path to the package file"
    echo "-on,   --operator-name   Name of the operator - by default it uses toolchain-{repository_name}"
    echo "-h,    --help            To show this help text"
    echo ""
    echo "Examples:"
    echo "   ./scripts/generate-deploy-hack.sh -on codeready-toolchain-operator -csvs manifests/ -crds manifests/0.1.1/ -pf manifests/codeready-toolchain-operator.package.yaml -hd /tmp/crto-0.1.1"
    echo "          - This command will generate deploy_csv.yaml file inside of /tmp/crto-0.1.1 directory."
    echo "             The deployment will contain all CSVs found in manifests/ directory recursively and all CRDs from manifests/0.1.1/ directory. "
    echo ""
    exit 0
}

read_arguments() {
    if [[ $# -lt 2 ]]
    then
        echo $#
        user_help
    fi

    while test $# -gt 0; do
           case "$1" in
                -h|--help)
                    user_help
                    ;;
                -crds|--crds-dir)
                    shift
                    HACK_CRDS_DIR=$1
                    shift
                    ;;
                -hd|--hack-dir)
                    shift
                    HACK_DIR=$1
                    shift
                    ;;
                -csvs|--csvs-dir)
                    shift
                    HACK_CSV_DIR=$1
                    shift
                    ;;
                -pf|--package-file)
                    shift
                    HACK_PKG_FILE=$1
                    shift
                    ;;
                -on|--operator-name)
                    shift
                    OPERATOR_NAME=$1
                    shift
                    ;;
                *)
                   echo "$1 is not a recognized flag!" >> /dev/stderr
                   user_help
                   exit -1
                   ;;
          esac
    done
}

create_deploy_hacks() {
    echo "## Generating files for easy deployment from '${HACK_CRDS_DIR}' into ${HACK_DIR} ..."

    DISPLAYNAME=$(echo ${OPERATOR_NAME} | tr '-' ' ' | awk '{for (i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')

    # Create hack directory if is missing
    if [[ ! -d ${HACK_DIR} ]]; then
        mkdir ${HACK_DIR}
    fi

    # CatalogSource and ConfigMap for easy deployment
    echo "# This file was autogenerated by github.com/codeready-toolchain/api/olm-catalog.sh'
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: cm-${OPERATOR_NAME}
  namespace: openshift-marketplace
data:
  customResourceDefinitions: |-
$(for crd in `ls ${HACK_CRDS_DIR}/*crd.yaml `; do cat ${crd} | indent_list; done)
  clusterServiceVersions: |-
$(for csv in `find ${HACK_CSV_DIR} -name *clusterserviceversion.yaml`; do cat ${csv} | indent_list | sed -e 's|^ *$||g'; done)
  packages: |
$(cat ${HACK_PKG_FILE} | indent_list "packageName")
---
apiVersion: operators.coreos.com/v1alpha1
kind: CatalogSource
metadata:
  name: source-${OPERATOR_NAME}
  namespace: openshift-marketplace
spec:
  configMap: cm-${OPERATOR_NAME}
  displayName: ${DISPLAYNAME}
  publisher: Red Hat
  sourceType: internal" > ${HACK_DIR}/deploy_csv.yaml

    echo "To deploy the operator bundle run:"
    echo "     oc apply -f ${HACK_DIR}"
}

indent_list() {
    local INDENT="      "
    sed -e "s/^/${INDENT}/;1s/^${INDENT}/${INDENT:0:${#INDENT}-2}- /"
}

read_arguments $@
create_deploy_hacks